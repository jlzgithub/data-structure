Status InitList(LinkList &L)
{
	L=new LNode;
	L->next=NULL;
	return OK;
}


Status GetElem(LinkList L,int i,ElemType &e)
{
	p=L->next;j=1;
	while(p&&j<i)
	{p=p->next;
	++j;}
if(!p||j>i£©return ERROR;
e=p->data;
return OK;
}


LNode *LocateElem(LinkList L,ElemType e)
{p=L->next;
 while(p&&p->data!=e)
p=p->next;
return p;
}

s->next=p->next; p->next=s;

Status InsertElem(LinkList &L,int i,ElemType e){
	p=L;j=0;
	while(p&&j<(i-1))
	{
		p=p->next;
		++j;}
	if(!p||j>i-1) return ERROR;
	s=new LNode;
	s->data=e;
	s->next=p->next;
	p->next=s;
	return OK;
}
	
Status DeleteElem(LinkList &L,int i)
{p=L;j=0;
while((p->next)&&(j<i-1))
{
	p=p->next;
	++j;
}
if(!(p->next)||j>(i-1)) return ERROR;
q=p->next;
p->next=q->next;
delete q;
return OK;
}

Void CreateList_H(LinkList &L,int n)
{
	L=new LNode;
	L->next=NULL;
	for(i=0;i<n;i++)
	{
		q=new LNode;
		cin>>q->data;
		q->next=L->next;
		L->next=q;
}}

void CreateList_R(LinkList &L,int n)
{
	L=new LNode;
	L->next=NULL;
	r=L;
	for(i=0;i<n;++i)
	{
		p=new LNode;
		cin>>p->data;
		p->next=NULL;r->next=p;
		r=p;
	}
}

typedef struct DuLNode
{
	ElemType data;
	struct DuLNode *prior;
	struct DuLNode *next;
}DuLNode,*DuLinkList;

Status ListInsert_DUL(DuLinkList &L,int i,ElemType e)
{
	if(!(p=GetElem_DuL(L,i)))
	return ERROR;
	s=new DuLNode;
	s->data=e;
	s->prior=p->prior;
	p->prior->next=s;
	s->next=p;
	p->prior=s;
	return ERROR;
}

Status ListDelete_DUL(DuLinkList & L, int i)
{
	if(!(p=GetElem_DuL(L,i)))
	return ERROR;
	P->prior->next=p->next;
	p->next->prior=p->prior;
	return OK;
}